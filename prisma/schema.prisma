// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Product {
  id            String   @id @default(uuid())
  name          String
  priceInPence  Int
  imagePath     String
  description   String
  isAvailable   Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  order         Order[]
  cpuModel      String
  gpuModel      String
  colour        String
  caseSize      String
  memorySize    String
  memoryType    String
  storageType   String
  totalStorage  String
  connectivity  String
  coolingMethod String
}

model Order {
  id        String   @id @default(uuid())
  pricePaid Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  UserId    String
  productId String
  user      User    @relation(fields: [UserId], references: [id], onDelete: Cascade)
  product   Product @relation(fields: [productId], references: [id], onDelete: Restrict)
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id                    String                 @id @default(cuid())
  name                  String?
  email                 String                 @unique
  emailVerified         DateTime?
  image                 String?
  password              String?
  role                  UserRole               @default(USER)
  orders                Order[]
  accounts              Account[]
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
  basket                String[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id String @id @default(cuid())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model CPU {
  id                 String  @id @default(uuid())
  title              String
  imagePath          String  @map("image")
  priceInPence       Int
  Wattage            Int
  Socket             Socket
  IntegratedGraphics Boolean
  IntegratedCooler   Boolean
}

enum Socket {
  AM4
  AM5
  LGA1151
  LGA1200
  LGA1700
}

model cpuCooler {
  id           String  @id @default(uuid())
  title        String
  imagePath    String  @map("image")
  priceInPence Int
  AM4          Boolean
  AM5          Boolean
  LGA1151      Boolean
  LGA1200      Boolean
  LGA1700      Boolean
  wattage      Int
}

model Motherboard {
  id           String   @id @default(uuid())
  title        String
  imagePath    String   @map("image")
  priceInPence Int
  Wattage      Int
  Socket       Socket
  memorySlots  Int
  ATX          Boolean
  EATX         Boolean
  MicroATX     Boolean
  MiniITX      Boolean
  XLATX        Boolean
  memorySpeed  String[]
  wifi         Boolean
}

model memory {
  id             String @id @default(uuid())
  title          String
  imagePath      String @map("image")
  priceInPence   Int
  Wattage        Int
  numberOfSticks Int
  speed          Int
  capacity       Int
}

model storage {
  id           String @id @default(uuid())
  title        String
  imagePath    String
  priceInPence Int
  connection   String
  capacity     Int
  wattage      Int
}

enum connection {
  sata
  PCIE
}

model Gpu {
  id           String @id @default(uuid())
  title        String
  imagePath    String
  priceInPence Int
  Wattage      Int
  width        Int
}

model Case {
  id           String  @id @default(uuid())
  title        String
  imagePath    String
  priceInPence Int
  ATX          Boolean
  EATX         Boolean
  MicroATX     Boolean
  MiniITX      Boolean
  XLATX        Boolean
}

model PSU {
  id           String @id @default(uuid())
  title        String
  imagePath    String
  priceInPence Int
  wattage      Int
}
